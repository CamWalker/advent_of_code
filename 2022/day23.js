const utils = require('../utils');

const sample = `....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..`;

const inp = `###.#..#.##...###..#..#..#.####.####.###.###...##.#...#.###...#..##.....##
#..#.#######.##.#..#..#.#.#.#..#.####..##..#.......##########.####...##...
#.....#####...#####.#....####...####..#.##.#.####....#....###.####.###.#..
#.###.#..###.#.##.#.#.###.###.#......#..###......###..##...##.##.#..#..##.
..####.#...##.####..#.......######..##.##.#.....#.###........#.#..####..#.
.#..#.......####.....#.#..##..#..##.#.#.#...##..#.#.#.#.#..#.#.#.#...###..
##...##......#.#.#.###....##..###.#.#..#.#...#####..#.#...#.##.#..###.##..
#.#.##.#####..#.#.#.....##....#..#.##.###.#.##.#.#..........####...#..##..
..##.##.##..#.#.##.##....####.#.#.##.##.###.#.##..#.##..#.##..#..#...##...
##..###.#.##.#.#.....#.#.#.###..#.........#.#.#####...#....#...#..#.#..#..
##..###..#.#####.#.#..##..#..#.......#...#.###.####..#..#..##.##.#..#...##
#.##.#.####.##..#.....####..#.##.##..#...##.#.#....###.#.########.###..##.
#.#...##.#..#.#.##..##..##.#.###.####.##......#.##.#..#.#....###.##..##.#.
###.#.##...###.##....#####.....###.#..##.#.#..#...#.####.#..#.#.#.#....###
..###.##..##..#...##.#.#.#.#####..#.##.#..#.#.#.#.#..#.#.#.####..#.###.#.#
###....#.#..#..#.##..#####.###.###....##.#.##...##..####.#.#..#....###.###
.###.##.##..##...#..#.#####.#.###.#....#.#..##..#.####.#..#..#.###....##..
##..###.#...#.....##..##.##.#..#....##.##...##.#....#...###.###.#..#..####
##....##..#.#.....#.#.....######.##.##..#.#......#..#####.#..##...###.####
..#...#...#.####...####..#.##..#.#...####.##..#.#####.#....#..##..##.#.#..
.##.###..####.#.#...#.....#.#...#.#...#.#.#..##.##....#.####...#.##.###...
.######....######.#.###.#.#.#.#.#...###.#.#..###....#.#.##..##..#.##..##..
.#.#...##.#.#.###....###..#..#...##..#...##...#..##...##.#...#.#......####
.####.#####.###.##..###.##.#.#.#....#...#.#.#..#....#.........#......#..#.
######.#####.#.#...#.##.#.#.#####..#.......####..#.###..#...#...#...##...#
......###.##.##..#...###.#.#.##.##.##.#.###.#..#.#######.##.###.#....##.##
.###..#.##.#.##.#...#..#..#....####..###.##.##.#.#...#...###.#.#.....##.##
##.#....###...####.####.#.#..##.###.#.#..#..##..##...#...#....###...#.#...
..##.###..#..###...#.#.##.#####.#..##..#.#.####.#.#.#...#..#.##....##.#...
#...#.#.####.##.#.###.#.##.####..#.#..#..#..####...####.####..#.###.##..#.
.##.#..#.##...##..#..#...####...#.##.####..#..#.##.##.##.###.#.#...#.#.##.
##.###..#.....##..#.####.#..#.##.##..##...#####.#.#.#.#...#.#.####.######.
#.#.#....#..#..#..##.#.....##...####..#.###.#...##.#...######.#.##...#...#
..##.####....#..#.##..##.##.#.##..#######.#....#.#..##..####.##.##..#.##.#
.#...#..#....#.#.#####...####....#.#####..##.#.##........#.##.....#####.##
#.##.##.###.#..#.#.#.##.###...####.#.##...#..##.#.######..##.##....#.#....
.#..####.#..##.#.#..#....#....####...####.##......#.###.###.....####..#...
###....#...##.#######..#.####.#.#.#.#.###..#..##.....#.#####.#######..##..
#.#......#.#.#######.#..#..##.#.#####.######.##.#.####..#.#.....#####.#.#.
.#.##..####..#.#..#.#..#.###.....##.#.###.#....####.###.#.##.#.#.#...##.#.
#.#.......#####..###########.#..#####.##..##.#.#..#########.####.###.#.###
##..#.##..###....#..#..##...#.##.###.#.....#.#.#.#.#......####...##..#.#..
...#.#####.#.###....##..#.#..##.#..##.##.#.##.##.###...##...#.#.#.#.#..#..
.###...###...#.#.#.#.#..##....#...#....#..####...#..###.##.##.##.##...#...
#...##...##..###..###..##.#....#########.#...#.#..#..#..##......#.#..#...#
#.#.##.....#.....#.....#.###........#####.#...##.....#...##.#....##..#....
.......#....###.#.###.......#.#.....#...#.##....#.#.#...####.#####.###..#.
.#####.#.....###.....####....#.##.#.##...##...##..##.##.#.#....#...#..###.
..#.....##...#.#.##...####..#.#.#.###.##..#.#..##.#....#.#.#####.#.##.#.#.
#######.#####..#.#.#.#...##.#....##...###....#...####...#...####.#.####...
.##.##.#.####.#.#.##.#.###...#.#...##.#.##..###.##......#.....##.###......
#.#.#.....#..#.##..#.#.#.#######...#.##.#..##.#..##...#..#.#.#..#.##..####
####.##..#.#####...#######.##.#...#....####...###..##.#...####.##..##....#
.##..#..#..####..#..######.#.#.#..#.#.#..#..#####..##..#..#####.#.##...##.
###.##.#..#.####.#......#..#.###.#.#......#.#.##.##.#.#.##...#..#####..##.
.#.##.#.##..#.###..#.##.###..#..#...####..##...#...#.###....#.#..#....##.#
#...##.##..#..##.###.##.####.##.#.###..#.##..#.####.##..#.##.....##..#.###
...###...#.#..##.#.######.##...###.#.#...#.#..#.#.#....##...###.....##.#.#
###....###.####..#.#..####.#.###.#..##...#...#.#.#.#######.#.##.##.###.#..
#.##...##...#####....##.##.##..#####.##.#.####.#.#.##.#..........#.#.##.##
#.##.#.##.###...##.########.##.###.##....#####.######.##.#####.#.#...##...
#.#.#..#.#....#####.#..##..#####...###..#...##.###..####.##............#.#
###...#.#....##.##.###...#########..###.#.######......#..###..#..#.#....##
#.##...#.#####..#.#.#...##.#...#...#....##########.#..#.#.....#..##..#.#.#
##...##.####.#..#.#####.#.#..#..##.#.###..#.#.....#..##.##...##..##.#.#.##
.##.###.....#.....#.##...##.#...#..####.###............####.###.#.#....#..
.#.#.####...#...#.#.###...##.#...#..#.##.......#.....##...##.##.#.#.####..
#..#..#.##.#.#.###...#...##.#.###..##..#####...#..###.##.###.#.#...#...#.#
.###.#..#.#..####...#...###.#..#......#.#..#..#.###......#.##.########...#
###.####...#.#.##...##..###..##..#.#.##.#.#.#.####.#..##..#...####..#####.
##.....##..#.#.##...##....#.#.####..#.###.##.###......#....#.#.#..##.#.#.#
####..####....#...#.##.##.#.#..#####.#####...##.#..#..#.#...###..#....#.#.
...##.#..##.#...#####.#...#.###....#...#.#....##....#...#.##..#......#.#.#
.#.###.#...###.####..#..##.##..#.##........###.#...#...##..#...###..###.#.`;

positions = [
	[1, 0],
	[1, 1],
	[1, -1],
	[0, 1],
	[0, -1],
	[-1, 0],
	[-1, -1],
	[-1, 1],
];

directionConsiderations = [
	[[-1, -1], [0, -1], [1, -1]], // N
	[[-1, 1], [0, 1], [1, 1]], // S
	[[-1, -1], [-1, 0], [-1, 1]], // W
	[[1, -1], [1, 0], [1, 1]], // E
]
let occupiedPositions = new Set();

class Elf {
	constructor(x, y) {
		this.x = x;
		this.y = y;
		this.proposal = null;
	}

	get proposalFormatted() {
		return `${this.proposal.x},${this.proposal.y}`;
	}

	propose() {
		const shouldStay = positions.reduce((bool, [x, y]) => bool && !occupiedPositions.has(`${this.x + x},${this.y + y}`), true);
		if (shouldStay) {
			this.proposal = null;
			return false;
		}

		for (let i = 0; i < directionConsiderations.length; i++) {
			const consideration = directionConsiderations[i];
			const shouldMove = consideration.reduce((shouldMove, [x, y]) => shouldMove && !occupiedPositions.has(`${this.x + x},${this.y + y}`), true);
			if (shouldMove) {
				this.proposal = { x: this.x + consideration[1][0], y: this.y + consideration[1][1] };
				return `${this.x + consideration[1][0]},${this.y + consideration[1][1]}`;
			}
		}
		this.proposal = null;
		return false;
	}

	moveToProposal() {
		this.x = this.proposal.x;
		this.y = this.proposal.y;
		this.proposal = null;
	}
}

function part1(input) {
	const grid = Array.buildGrid(input, '\n', '');
	const elves = [];

	grid.forEachGrid((cell, y, x) => {
		if (cell === '#') {
			occupiedPositions.add(`${x},${y}`);
			elves.push(new Elf(x, y));
		}
	});

	let proposalCounts;
	let proposalElves;
	function resetProposalElves() {
		proposalCounts = {};
		proposalElves = elves.filterMap((elf) => {
			const proposal = elf.propose();
			if (proposal) {
				if (!proposalCounts[proposal]) {
					proposalCounts[proposal] = 1;
				} else {
					proposalCounts[proposal] += 1;
				}
			}
			return [proposal, elf];
		});
	}

	resetProposalElves();

	let round = 0;
	while (proposalElves.length) {
		// rotate directionConsiderations
		const first = directionConsiderations.shift();
		directionConsiderations.push(first);

		// move
		proposalElves.forEach(elf => {
			if (proposalCounts[elf.proposalFormatted] === 1) {
				// you can move
				elf.moveToProposal();
			}
		}) 
		occupiedPositions = new Set((elves.map(elf => `${elf.x},${elf.y}`)));

		resetProposalElves();
		round++;
	}

	const xs = elves.map(elf => elf.x);
	const ys = elves.map(elf => elf.y);
	const minX = Math.min(...xs);
	const maxX = Math.max(...xs);
	const minY = Math.min(...ys);
	const maxY = Math.max(...ys);
	// return ((maxX - minX + 1) * (maxY - minY + 1)) - elves.length;
	return round;
}

// const result = part1(inp);
const result = part1(sample);
console.log(result);